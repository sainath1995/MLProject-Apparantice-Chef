{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training Score: 0.6481\n",
      "Testing Score: 0.5789\n",
      "Training Score: 0.6481\n",
      "Testing Score: 0.5789\n",
      "Training Score: 0.6481\n",
      "Testing Score: 0.5789\n",
      "Training Score: 0.6481\n",
      "Testing Score: 0.5789\n",
      "Training Score: 0.6481\n",
      "Testing Score: 0.5789\n",
      "Training Score: 0.6481\n",
      "Testing Score: 0.5789\n",
      "Training Score: 0.6481\n",
      "Testing Score: 0.5789\n",
      "Training Score: 0.6481\n",
      "Testing Score: 0.5789\n",
      "478 ms ± 5 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n"
     ]
    }
   ],
   "source": [
    "%%timeit\n",
    "# Student Name : Sainath Chaganti\n",
    "# Cohort       : 3 \n",
    "\n",
    "import pandas as pd  \n",
    "import numpy as np  \n",
    "import matplotlib.pyplot as plt  \n",
    "import seaborn as seabornInstance \n",
    "from sklearn.model_selection import train_test_split \n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn import metrics\n",
    "\n",
    "\n",
    "# In[4]:\n",
    "\n",
    "\n",
    "file = \"Apprentice_Chef_Dataset.xlsx\"\n",
    "\n",
    "original_df = pd.read_excel(file)\n",
    "\n",
    "\n",
    "# In[5]:\n",
    "\n",
    "\n",
    "#filling missing values \n",
    "\n",
    "fill_family = 'NA'\n",
    "\n",
    "#imputing it into fill\n",
    "original_df['FAMILY_NAME'] = original_df['FAMILY_NAME'].fillna(fill_family)\n",
    "\n",
    "\n",
    "\n",
    "# In[6]:\n",
    "\n",
    "\n",
    "#Dropping columns\n",
    "original_df_new = original_df.drop(['NAME', 'EMAIL' ,'FIRST_NAME', 'FAMILY_NAME',\"CROSS_SELL_SUCCESS\"],axis = 1)\n",
    "\n",
    "\n",
    "# In[7]:\n",
    "\n",
    "\n",
    "X_features = original_df_new[['AVG_TIME_PER_SITE_VISIT','LARGEST_ORDER_SIZE','AVG_CLICKS_PER_VISIT','MASTER_CLASSES_ATTENDED','TOTAL_PHOTOS_VIEWED','MEDIAN_MEAL_RATING','TOTAL_MEALS_ORDERED','UNIQUE_MEALS_PURCH','AVG_PREP_VID_TIME']]\n",
    "y_target = original_df_new[['REVENUE']]\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X_features,\n",
    "                                                    y_target,\n",
    "                                                    test_size = 0.25,\n",
    "                                                    random_state = 222)\n",
    "\n",
    "\n",
    "# In[9]:\n",
    "\n",
    "\n",
    "from sklearn.linear_model import LinearRegression\n",
    "\n",
    "# INSTANTIATING a model object\n",
    "lr = LinearRegression()\n",
    "\n",
    "\n",
    "# FITTING to the training data\n",
    "lr_fit = lr.fit(X_features , y_target)\n",
    "\n",
    "\n",
    "# PREDICTING on new data\n",
    "lr_pred = lr_fit.predict(X_test)\n",
    "\n",
    "\n",
    "# SCORING the results\n",
    "print('Training Score:', lr.score(X_train, y_train).round(4))\n",
    "print('Testing Score:',  lr.score(X_test, y_test).round(4))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
